import{s as j,r as D,n as O}from"../chunks/scheduler.B-KQ0TV-.js";import{S as W,i as z,m as g,n as _,o as v,k as w,l as b,p as x,s as C,f as E,g as f,d as u,e as m,c as h,a as k,r as p,h as A,u as L,v as I,w as R,t as H,b as M,j as P}from"../chunks/index.BVfQ5-ZG.js";import{E as y,a as F,b as T}from"../chunks/EtudeCard.BNWHReRY.js";function U(o,e){const l=o.toLowerCase().replace(/[^a-z]/g,""),n=e.toLowerCase().replace(/[^a-z]/g,"");if(n.length>l.length)return null;const t=l.split("");for(const r of n){const s=t.indexOf(r);if(s===-1)return null;t.splice(s,1)}return t.join("")}function S(o,e,l=[]){for(let n=0;n<e.length;n++){const t=U(o,e[n]);if(t!==null){if(t!==""){const r=S(t,e);if(!r)continue;l.push(...r)}return l.unshift(e[n]),l}}return null}function q(o){const[e,l]=o.trim().split(/\n\s*\n/),n=e.split(`
`).map(r=>r.trim()).filter(r=>r.length>0),t=l.split(`
`).map(r=>r.trim()).filter(r=>r.length>0).sort((r,s)=>r.length!==s.length?s.length-r.length:r.localeCompare(s));return{words:n,dictionary:t}}function B(o,e){return`${o}: ${e?e.join(" "):""}`}function V(o){let e,l="Enter words followed by dictionary (separated by blank line):",n,t,r,s,a="Find Anagrams",c,d;return{c(){e=m("p"),e.textContent=l,n=C(),t=m("textarea"),r=C(),s=m("button"),s.textContent=a,this.h()},l(i){e=h(i,"P",{class:!0,"data-svelte-h":!0}),L(e)!=="svelte-mrn9o8"&&(e.textContent=l),n=E(i),t=h(i,"TEXTAREA",{class:!0,placeholder:!0,rows:!0,spellcheck:!0}),k(t).forEach(u),r=E(i),s=h(i,"BUTTON",{class:!0,"data-svelte-h":!0}),L(s)!=="svelte-kh14rt"&&(s.textContent=a),this.h()},h(){p(e,"class","etude-info svelte-1bl7sun"),p(t,"class","etude-input svelte-1bl7sun"),p(t,"placeholder","Enter words and dictionary..."),p(t,"rows","10"),p(t,"spellcheck","false"),p(s,"class","etude-button svelte-1bl7sun")},m(i,$){f(i,e,$),f(i,n,$),f(i,t,$),I(t,o[0]),f(i,r,$),f(i,s,$),c||(d=[R(t,"input",o[3]),R(s,"click",o[2])],c=!0)},p(i,$){$&1&&I(t,i[0])},d(i){i&&(u(e),u(n),u(t),u(r),u(s)),c=!1,D(d)}}}function N(o){let e,l;return{c(){e=m("pre"),l=H(o[1]),this.h()},l(n){e=h(n,"PRE",{class:!0});var t=k(e);l=M(t,o[1]),t.forEach(u),this.h()},h(){p(e,"class","etude-pre")},m(n,t){f(n,e,t),A(e,l)},p(n,t){t&2&&P(l,n[1])},d(n){n&&u(e)}}}function X(o){let e,l,n,t,r;return l=new T({props:{title:"Input",$$slots:{default:[V]},$$scope:{ctx:o}}}),t=new T({props:{title:"Output",$$slots:{default:[N]},$$scope:{ctx:o}}}),{c(){e=m("div"),g(l.$$.fragment),n=C(),g(t.$$.fragment),this.h()},l(s){e=h(s,"DIV",{class:!0});var a=k(e);_(l.$$.fragment,a),n=E(a),_(t.$$.fragment,a),a.forEach(u),this.h()},h(){p(e,"class","etude-grid svelte-1bl7sun")},m(s,a){f(s,e,a),v(l,e,null),A(e,n),v(t,e,null),r=!0},p(s,a){const c={};a&17&&(c.$$scope={dirty:a,ctx:s}),l.$set(c);const d={};a&18&&(d.$$scope={dirty:a,ctx:s}),t.$set(d)},i(s){r||(w(l.$$.fragment,s),w(t.$$.fragment,s),r=!0)},o(s){b(l.$$.fragment,s),b(t.$$.fragment,s),r=!1},d(s){s&&u(e),x(l),x(t)}}}function G(o){let e,l=`apple
appleapple
frog
app
el
leap
pel`,n,t,r="<li>First section: Words to find anagrams for</li> <li>Empty line as separator</li> <li>Second section: Dictionary words</li>";return{c(){e=m("pre"),e.textContent=l,n=C(),t=m("ul"),t.innerHTML=r,this.h()},l(s){e=h(s,"PRE",{class:!0,"data-svelte-h":!0}),L(e)!=="svelte-ok5feb"&&(e.textContent=l),n=E(s),t=h(s,"UL",{class:!0,"data-svelte-h":!0}),L(t)!=="svelte-ob4kji"&&(t.innerHTML=r),this.h()},h(){p(e,"class","etude-pre"),p(t,"class","etude-list")},m(s,a){f(s,e,a),f(s,n,a),f(s,t,a)},p:O,d(s){s&&(u(e),u(n),u(t))}}}function J(o){let e,l="<li>Longer words are preferred over shorter ones</li> <li>When lengths are equal, alphabetical order decides</li> <li>Only complete dictionary words are allowed</li> <li>Words can be reused in a solution</li> <li>Capitalization and whitespace are ignored</li>";return{c(){e=m("ul"),e.innerHTML=l,this.h()},l(n){e=h(n,"UL",{class:!0,"data-svelte-h":!0}),L(e)!=="svelte-vx0m31"&&(e.innerHTML=l),this.h()},h(){p(e,"class","etude-list")},m(n,t){f(n,e,t)},p:O,d(n){n&&u(e)}}}function K(o){let e,l,n,t,r;return l=new T({props:{title:"Input Format",$$slots:{default:[G]},$$scope:{ctx:o}}}),t=new T({props:{title:"Ranking Rules",$$slots:{default:[J]},$$scope:{ctx:o}}}),{c(){e=m("div"),g(l.$$.fragment),n=C(),g(t.$$.fragment),this.h()},l(s){e=h(s,"DIV",{class:!0});var a=k(e);_(l.$$.fragment,a),n=E(a),_(t.$$.fragment,a),a.forEach(u),this.h()},h(){p(e,"class","etude-grid svelte-1bl7sun")},m(s,a){f(s,e,a),v(l,e,null),A(e,n),v(t,e,null),r=!0},p(s,a){const c={};a&16&&(c.$$scope={dirty:a,ctx:s}),l.$set(c);const d={};a&16&&(d.$$scope={dirty:a,ctx:s}),t.$set(d)},i(s){r||(w(l.$$.fragment,s),w(t.$$.fragment,s),r=!0)},o(s){b(l.$$.fragment,s),b(t.$$.fragment,s),r=!1},d(s){s&&u(e),x(l),x(t)}}}function Q(o){let e,l,n,t;return e=new F({props:{title:"Anagram Finder",$$slots:{default:[X]},$$scope:{ctx:o}}}),n=new F({props:{title:"Example & Rules",$$slots:{default:[K]},$$scope:{ctx:o}}}),{c(){g(e.$$.fragment),l=C(),g(n.$$.fragment)},l(r){_(e.$$.fragment,r),l=E(r),_(n.$$.fragment,r)},m(r,s){v(e,r,s),f(r,l,s),v(n,r,s),t=!0},p(r,s){const a={};s&19&&(a.$$scope={dirty:s,ctx:r}),e.$set(a);const c={};s&16&&(c.$$scope={dirty:s,ctx:r}),n.$set(c)},i(r){t||(w(e.$$.fragment,r),w(n.$$.fragment,r),t=!0)},o(r){b(e.$$.fragment,r),b(n.$$.fragment,r),t=!1},d(r){r&&u(l),x(e,r),x(n,r)}}}function Y(o){let e,l;return e=new y({props:{title:"Finding Anagrams",description:"Find the best anagrams for given words using a provided dictionary, prioritizing longer words and alphabetical order.",$$slots:{default:[Q]},$$scope:{ctx:o}}}),{c(){g(e.$$.fragment)},l(n){_(e.$$.fragment,n)},m(n,t){v(e,n,t),l=!0},p(n,[t]){const r={};t&19&&(r.$$scope={dirty:t,ctx:n}),e.$set(r)},i(n){l||(w(e.$$.fragment,n),l=!0)},o(n){b(e.$$.fragment,n),l=!1},d(n){x(e,n)}}}function Z(o,e,l){let n=`apple
appleapple
frog
app
el
leap
pel`,t="";function r(){try{const{words:a,dictionary:c}=q(n),d=[];for(const i of a){const $=S(i,c,[]);d.push(B(i,$))}l(1,t=d.join(`
`))}catch{l(1,t="Error: Invalid input format")}}function s(){n=this.value,l(0,n)}return[n,t,r,s]}class se extends W{constructor(e){super(),z(this,e,Z,Y,j,{})}}export{se as component};
