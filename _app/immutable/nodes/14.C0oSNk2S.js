import{s as Y,o as tt,d as et,r as st,n as K}from"../chunks/scheduler.B-KQ0TV-.js";import{S as nt,i as ot,m as I,n as z,o as A,k as L,l as y,p as G,s as x,f as P,g as D,d as $,e as v,c as _,a as k,r as m,h as g,u as M,v as Q,w as O,t as it,b as rt,j as at}from"../chunks/index.BVfQ5-ZG.js";import{E as lt,a as J,b as q}from"../chunks/EtudeCard.BNWHReRY.js";function Z(a){const s=a.trim().split(`
`).filter(o=>!o.trim().startsWith("#")&&o.trim()!=="");if(s.length<1)throw new Error("Invalid input: No valid dimensions line found");const[n,i]=s[0].split(/\s+/).map(Number);if(isNaN(n)||isNaN(i)||n<2||i<2)throw new Error("Invalid input: Grid dimensions must be valid numbers >= 2");const r=s.slice(1).map(o=>{const[e,l]=o.split(/\s+/).map(Number);if(isNaN(e)||isNaN(l)||e<0||l<0||e>=n||l>=i)throw new Error("Invalid input: Person coordinates must be within grid bounds");return{row:e,col:l}});return{rows:n,cols:i,people:r}}class ct{constructor(t,s){this.rows=t,this.cols=s,this.size=t*s,this.edges=Array(this.size).fill(null).map(()=>[]),this.initializeEdges()}edges;size;initializeEdges(){for(let t=0;t<this.rows;t++)for(let s=0;s<this.cols;s++){const n=this.getNeighbors(t,s),i={row:t,col:s};for(const r of n)this.addEdge(i,r)}}getNeighbors(t,s){const n=[];return t>0&&n.push({row:t-1,col:s}),t<this.rows-1&&n.push({row:t+1,col:s}),s>0&&n.push({row:t,col:s-1}),s<this.cols-1&&n.push({row:t,col:s+1}),n}addEdge(t,s){const n=this.pointToIndex(t);this.edges[n].push(s)}pointToIndex(t){return t.row*this.cols+t.col}indexToPoint(t){const s=Math.floor(t/this.cols),n=t%this.cols;return{row:s,col:n}}manhattanDistance(t,s){return Math.abs(t.row-s.row)+Math.abs(t.col-s.col)}findOptimalPath(t){const s=new Set,n=o=>`${o.row},${o.col}`,i=o=>{let e=Number.MAX_VALUE,l=0;for(const u of t){const f=this.manhattanDistance(o,u);e=Math.min(e,f),l+=f}return e*1e3+l},r=new ut((o,e)=>e.score-o.score);for(r.push({point:{row:0,col:0},score:i({row:0,col:0}),path:[{row:0,col:0}]});!r.isEmpty();){const o=r.pop(),e=n(o.point);if(s.has(e))continue;if(s.add(e),o.point.row===this.rows-1&&o.point.col===this.cols-1){let u=Number.MAX_VALUE,f=0;for(const C of o.path)for(const E of t){const w=this.manhattanDistance(C,E);u=Math.min(u,w),f+=w}return{min:u,total:Math.floor(f/t.length),path:o.path}}const l=this.getNeighbors(o.point.row,o.point.col);for(const u of l)if(!s.has(n(u))){const f=i(u);r.push({point:u,score:f,path:[...o.path,u]})}}return{min:0,total:0,path:[]}}}class ut{constructor(t){this.compare=t}items=[];push(t){this.items.push(t),this.items.sort(this.compare)}pop(){return this.items.shift()}isEmpty(){return this.items.length===0}}function dt(a){const t=Z(a);return new ct(t.rows,t.cols).findOptimalPath(t.people)}function ht(a){let t,s,n,i="Example Scenarios:",r,o,e,l="Corridor",u,f,C="Diagonal",E,w,R="Corners",H,S,W="Sparse",B,d,V,T,j="Find Path",h,U;return{c(){t=v("div"),s=v("div"),n=v("h4"),n.textContent=i,r=x(),o=v("div"),e=v("button"),e.textContent=l,u=x(),f=v("button"),f.textContent=C,E=x(),w=v("button"),w.textContent=R,H=x(),S=v("button"),S.textContent=W,B=x(),d=v("textarea"),V=x(),T=v("button"),T.textContent=j,this.h()},l(N){t=_(N,"DIV",{class:!0});var b=k(t);s=_(b,"DIV",{class:!0});var X=k(s);n=_(X,"H4",{"data-svelte-h":!0}),M(n)!=="svelte-1ta4mrz"&&(n.textContent=i),r=P(X),o=_(X,"DIV",{class:!0});var F=k(o);e=_(F,"BUTTON",{class:!0,"data-svelte-h":!0}),M(e)!=="svelte-1s22ofg"&&(e.textContent=l),u=P(F),f=_(F,"BUTTON",{class:!0,"data-svelte-h":!0}),M(f)!=="svelte-1rcf84a"&&(f.textContent=C),E=P(F),w=_(F,"BUTTON",{class:!0,"data-svelte-h":!0}),M(w)!=="svelte-1tc5j5m"&&(w.textContent=R),H=P(F),S=_(F,"BUTTON",{class:!0,"data-svelte-h":!0}),M(S)!=="svelte-1jyxr3w"&&(S.textContent=W),F.forEach($),X.forEach($),B=P(b),d=_(b,"TEXTAREA",{class:!0,placeholder:!0,rows:!0,spellcheck:!0}),k(d).forEach($),V=P(b),T=_(b,"BUTTON",{class:!0,"data-svelte-h":!0}),M(T)!=="svelte-1uq4um4"&&(T.textContent=j),b.forEach($),this.h()},h(){m(e,"class","pattern-button svelte-imd4o9"),m(f,"class","pattern-button svelte-imd4o9"),m(w,"class","pattern-button svelte-imd4o9"),m(S,"class","pattern-button svelte-imd4o9"),m(o,"class","button-grid svelte-imd4o9"),m(s,"class","example-buttons svelte-imd4o9"),m(d,"class","input-field svelte-imd4o9"),m(d,"placeholder","Enter grid dimensions and seated positions..."),m(d,"rows","8"),m(d,"spellcheck","false"),m(T,"class","game-button svelte-imd4o9"),m(t,"class","control-section svelte-imd4o9")},m(N,b){D(N,t,b),g(t,s),g(s,n),g(s,r),g(s,o),g(o,e),g(o,u),g(o,f),g(o,E),g(o,w),g(o,H),g(o,S),g(t,B),g(t,d),Q(d,a[0]),g(t,V),g(t,T),h||(U=[O(e,"click",a[5]),O(f,"click",a[6]),O(w,"click",a[7]),O(S,"click",a[8]),O(d,"input",a[9]),O(T,"click",a[3])],h=!0)},p(N,b){b&1&&Q(d,N[0])},d(N){N&&$(t),h=!1,st(U)}}}function ft(a){let t,s;return{c(){t=v("pre"),s=it(a[1]),this.h()},l(n){t=_(n,"PRE",{class:!0});var i=k(t);s=rt(i,a[1]),i.forEach($),this.h()},h(){m(t,"class","etude-pre")},m(n,i){D(n,t,i),g(t,s)},p(n,i){i&2&&at(s,n[1])},d(n){n&&$(t)}}}function pt(a){let t,s,n,i,r;return s=new q({props:{title:"Input",$$slots:{default:[ht]},$$scope:{ctx:a}}}),i=new q({props:{title:"Result",$$slots:{default:[ft]},$$scope:{ctx:a}}}),{c(){t=v("div"),I(s.$$.fragment),n=x(),I(i.$$.fragment),this.h()},l(o){t=_(o,"DIV",{class:!0});var e=k(t);z(s.$$.fragment,e),n=P(e),z(i.$$.fragment,e),e.forEach($),this.h()},h(){m(t,"class","etude-grid")},m(o,e){D(o,t,e),A(s,t,null),g(t,n),A(i,t,null),r=!0},p(o,e){const l={};e&65537&&(l.$$scope={dirty:e,ctx:o}),s.$set(l);const u={};e&65538&&(u.$$scope={dirty:e,ctx:o}),i.$set(u)},i(o){r||(L(s.$$.fragment,o),L(i.$$.fragment,o),r=!0)},o(o){y(s.$$.fragment,o),y(i.$$.fragment,o),r=!1},d(o){o&&$(t),G(s),G(i)}}}function mt(a){let t,s,n,i,r='<div class="legend-item svelte-imd4o9"><span class="legend-dot start svelte-imd4o9"></span> Start point</div> <div class="legend-item svelte-imd4o9"><span class="legend-dot end svelte-imd4o9"></span> End point</div> <div class="legend-item svelte-imd4o9"><span class="legend-dot seated svelte-imd4o9"></span> Seated person</div> <div class="legend-item svelte-imd4o9"><span class="legend-line path svelte-imd4o9"></span> Optimal path</div>';return{c(){t=v("div"),s=v("canvas"),n=x(),i=v("div"),i.innerHTML=r,this.h()},l(o){t=_(o,"DIV",{class:!0});var e=k(t);s=_(e,"CANVAS",{class:!0}),k(s).forEach($),e.forEach($),n=P(o),i=_(o,"DIV",{class:!0,"data-svelte-h":!0}),M(i)!=="svelte-1t27ebm"&&(i.innerHTML=r),this.h()},h(){m(s,"class","svelte-imd4o9"),m(t,"class","canvas-container svelte-imd4o9"),m(i,"class","grid-legend svelte-imd4o9")},m(o,e){D(o,t,e),g(t,s),a[10](s),D(o,n,e),D(o,i,e)},p:K,d(o){o&&($(t),$(n),$(i)),a[10](null)}}}function $t(a){let t,s;return t=new q({props:{title:"Grid",$$slots:{default:[mt]},$$scope:{ctx:a}}}),{c(){I(t.$$.fragment)},l(n){z(t.$$.fragment,n)},m(n,i){A(t,n,i),s=!0},p(n,i){const r={};i&65540&&(r.$$scope={dirty:i,ctx:n}),t.$set(r)},i(n){s||(L(t.$$.fragment,n),s=!0)},o(n){y(t.$$.fragment,n),s=!1},d(n){G(t,n)}}}function gt(a){let t,s=`<li><strong class="svelte-imd4o9">Corridor Challenge:</strong> Creates a narrow passage that tests minimum distance
						constraints</li> <li><strong class="svelte-imd4o9">Diagonal Formation:</strong> Forces path to choose between following or avoiding
						the diagonal</li> <li><strong class="svelte-imd4o9">Corner Guards:</strong> Tests path finding through open center space</li> <li><strong class="svelte-imd4o9">Sparse Distribution:</strong> Tests balancing multiple scattered constraints</li>`;return{c(){t=v("ul"),t.innerHTML=s,this.h()},l(n){t=_(n,"UL",{class:!0,"data-svelte-h":!0}),M(t)!=="svelte-xk21px"&&(t.innerHTML=s),this.h()},h(){m(t,"class","etude-list")},m(n,i){D(n,t,i)},p:K,d(n){n&&$(t)}}}function vt(a){let t,s="<li>Path must go from top-left to bottom-right</li> <li>Can only move horizontally or vertically</li> <li>Must maximize minimum distance from any seated person</li> <li>Must maximize total distance while maintaining minimum</li> <li>Comments starting with # are ignored</li>";return{c(){t=v("ul"),t.innerHTML=s,this.h()},l(n){t=_(n,"UL",{class:!0,"data-svelte-h":!0}),M(t)!=="svelte-1rzo7yt"&&(t.innerHTML=s),this.h()},h(){m(t,"class","etude-list")},m(n,i){D(n,t,i)},p:K,d(n){n&&$(t)}}}function _t(a){let t,s,n,i,r;return s=new q({props:{title:"Scenario Types",$$slots:{default:[gt]},$$scope:{ctx:a}}}),i=new q({props:{title:"Path Rules",$$slots:{default:[vt]},$$scope:{ctx:a}}}),{c(){t=v("div"),I(s.$$.fragment),n=x(),I(i.$$.fragment),this.h()},l(o){t=_(o,"DIV",{class:!0});var e=k(t);z(s.$$.fragment,e),n=P(e),z(i.$$.fragment,e),e.forEach($),this.h()},h(){m(t,"class","etude-grid")},m(o,e){D(o,t,e),A(s,t,null),g(t,n),A(i,t,null),r=!0},p(o,e){const l={};e&65536&&(l.$$scope={dirty:e,ctx:o}),s.$set(l);const u={};e&65536&&(u.$$scope={dirty:e,ctx:o}),i.$set(u)},i(o){r||(L(s.$$.fragment,o),L(i.$$.fragment,o),r=!0)},o(o){y(s.$$.fragment,o),y(i.$$.fragment,o),r=!1},d(o){o&&$(t),G(s),G(i)}}}function wt(a){let t,s,n,i,r,o;return t=new J({props:{title:"Path Finder",$$slots:{default:[pt]},$$scope:{ctx:a}}}),n=new J({props:{title:"Visualization",$$slots:{default:[$t]},$$scope:{ctx:a}}}),r=new J({props:{title:"Scenarios",$$slots:{default:[_t]},$$scope:{ctx:a}}}),{c(){I(t.$$.fragment),s=x(),I(n.$$.fragment),i=x(),I(r.$$.fragment)},l(e){z(t.$$.fragment,e),s=P(e),z(n.$$.fragment,e),i=P(e),z(r.$$.fragment,e)},m(e,l){A(t,e,l),D(e,s,l),A(n,e,l),D(e,i,l),A(r,e,l),o=!0},p(e,l){const u={};l&65539&&(u.$$scope={dirty:l,ctx:e}),t.$set(u);const f={};l&65540&&(f.$$scope={dirty:l,ctx:e}),n.$set(f);const C={};l&65536&&(C.$$scope={dirty:l,ctx:e}),r.$set(C)},i(e){o||(L(t.$$.fragment,e),L(n.$$.fragment,e),L(r.$$.fragment,e),o=!0)},o(e){y(t.$$.fragment,e),y(n.$$.fragment,e),y(r.$$.fragment,e),o=!1},d(e){e&&($(s),$(i)),G(t,e),G(n,e),G(r,e)}}}function bt(a){let t,s;return t=new lt({props:{title:"Social Distance Pathfinder",description:"Find optimal paths through a grid while maintaining maximum distance from seated people.",$$slots:{default:[wt]},$$scope:{ctx:a}}}),{c(){I(t.$$.fragment)},l(n){z(t.$$.fragment,n)},m(n,i){A(t,n,i),s=!0},p(n,[i]){const r={};i&65543&&(r.$$scope={dirty:i,ctx:n}),t.$set(r)},i(n){s||(L(t.$$.fragment,n),s=!0)},o(n){y(t.$$.fragment,n),s=!1},d(n){G(t,n)}}}const c=40,p=20;function Ct(a,t,s){const n={corridor:`# Corridor Challenge
9 8      # Grid size
4 0      # Creates a narrow corridor
4 1
4 2
4 3
4 5
4 6
4 7`,diagonal:`# Diagonal Formation
8 8      # Grid size
1 1      # Diagonal line of people
2 2
3 3
4 4
5 5
6 6`,corners:`# Corner Guards
10 10    # Grid size
1 1      # People in corners
1 8
8 1
8 8      # Forces path through middle`,sparse:`# Sparse Distribution
12 12    # Grid size
2 3      # Scattered people
4 8
7 4
9 9
3 10
10 2`};let i=n.corridor,r="",o,e,l,u;tt(()=>{e=o.getContext("2d"),C()});function f(d,V){const T=d.cols*c+2*p,j=d.rows*c+2*p;s(2,o.width=T,o),s(2,o.height=j,o),e.fillStyle="white",e.fillRect(0,0,T,j),e.strokeStyle="#ccc",e.lineWidth=1;for(let h=0;h<=d.rows;h++)e.beginPath(),e.moveTo(p,p+h*c),e.lineTo(p+d.cols*c,p+h*c),e.stroke();for(let h=0;h<=d.cols;h++)e.beginPath(),e.moveTo(p+h*c,p),e.lineTo(p+h*c,p+d.rows*c),e.stroke();e.fillStyle="#333";for(const h of d.people)e.beginPath(),e.arc(p+h.col*c+c/2,p+h.row*c+c/2,c/4,0,2*Math.PI),e.fill();V?.path&&(e.strokeStyle="#ff4444",e.lineWidth=3,e.lineCap="round",e.lineJoin="round",e.beginPath(),V.path.forEach((h,U)=>{const N=p+h.col*c+c/2,b=p+h.row*c+c/2;U===0?e.moveTo(N,b):e.lineTo(N,b)}),e.stroke(),e.fillStyle="#ff4444",V.path.forEach((h,U)=>{U!==0&&U!==V.path.length-1&&(e.beginPath(),e.arc(p+h.col*c+c/2,p+h.row*c+c/2,c/6,0,2*Math.PI),e.fill())})),e.fillStyle="#4CAF50",e.beginPath(),e.arc(p+c/2,p+c/2,c/4,0,2*Math.PI),e.fill(),e.fillStyle="#F44336",e.beginPath(),e.arc(p+(d.cols-1)*c+c/2,p+(d.rows-1)*c+c/2,c/4,0,2*Math.PI),e.fill()}function C(){try{l=Z(i),u=dt(i),f(l,u),s(1,r=`Minimum distance: ${u.min}, Average distance: ${u.total}`)}catch(d){s(1,r=`Error: ${d.message}`),l=null,u=null,e&&e.clearRect(0,0,o.width,o.height)}}function E(d){s(0,i=n[d]),C()}const w=()=>E("corridor"),R=()=>E("diagonal"),H=()=>E("corners"),S=()=>E("sparse");function W(){i=this.value,s(0,i)}function B(d){et[d?"unshift":"push"](()=>{o=d,s(2,o)})}return[i,r,o,C,E,w,R,H,S,W,B]}class Pt extends nt{constructor(t){super(),ot(this,t,Ct,bt,Y,{})}}export{Pt as component};
